;; ===== sanitize test =====
;<b>1000</b>

;; ===== preparation =====
(define-reader-ctor 'pi (lambda () (* (atan 1) 4)))

;; ===== comment =====
;  abcde
#! abcde
#| abcde
abcde |#
#| #|abcde|#
abcde |#
#;"abcde"

(print "abc"
;  abcde
#! abcde
#| abcde
abcde |#
#| #|abcde|#
abcde |#
#;"abcde"
)

;; ===== literal =====
(+ 1 2 3)
[+ 1 2 3]
{+ 1 2 3}
'(1 2 3)
'[1 2 3]
'{1 2 3}
`(1 2 3)
`(,1 ,2 ,@(+ 3 4 5))
'|abc|
#\a
"abc"
#(1 2 3)
#[abc]
#/abc/
#/abc/i
#?=(+ 1 2 3)
#*"abc"
#"abc"
#`"abc"
'#:abc
#u8(1 2 3)
#s8(1 2 3)
#f16(1 2 3)
#U64(1 2 3)
#S64(1 2 3)
#F64(1 2 3)
#,(pi)

(print "abc"
(+ 1 2 3)
[+ 1 2 3]
{+ 1 2 3}
'(1 2 3)
'[1 2 3]
'{1 2 3}
`(1 2 3)
`(,1 ,2 ,@(+ 3 4 5))
'|abc|
#\a
"abc"
#(1 2 3)
#[abc]
#/abc/
#/abc/i
#?=(+ 1 2 3)
#*"abc"
#"abc"
#`"abc"
'#:abc
#u8(1 2 3)
#s8(1 2 3)
#f16(1 2 3)
#U64(1 2 3)
#S64(1 2 3)
#F64(1 2 3)
#,(pi)
)

;; ===== keyword =====
(begin (+ 1)
(+ 2)
(+ 3)
)

(begin
(+ 1)
(+ 2)
(+ 3)
)

(case 3
((1 3 5 7) 'odd)
((2 4 6 8) 'even))

(delay
(+ 1 2 3))

(do ((i 1 (+ i 1)))
((>= i 10) #f)
(print i))

(export a
b
c
)

(export
a
b
c
)

(if #t
1
2
)

(if #t 1
2
)

(if
#t
1
2
)

(guard (exc ((<error> exc) #f))
(procedure? a))

(cond ((> 3 3)
'greater)
((< 3 3)
'less)
(else
'equal))

;; ===== newline in literal =====
(print "abc
def"
10
20
)

(+ 1 2 3
4 5 6)

'(1 2 3
4 5 6)

`(1 2 3
4 5 6)

#(1 2 3
4 5 6)

;; ===== S-comment in do =====
(do #;((i 1 (+ i 1)))
((i 1 (+ i 1)))
((>= i 10) #f)
(print i))

(do #;((i 1 #;(+ i 1)))
((i 1 (+ i 1)))
((>= i 10) #f)
(print i))

;; ===== space in literal =====
(if "a b c"
2
3
)

(if #"a b c"
2
3
)

(if #`"a b c"
2
3
)

(if #[a b c]
2
3
)

(if #/a b c/i
2
3
)

;; ===== char literal =====
'(#\| #\( #\) #\" #\;
#\[ #\] #\{ #\}
#\\ #\#
#\space #\return)

;; ===== delimiter =====
(+ 1	2
3)'|abc|"abc"[+ 1 2 3]{+ 1 2 3};abc

;; ===== others =====
(define x
10000)

(hash-table
'eq
'(a . 1)
'(b . 2)
'(c . 3))

(hash-table 'eq
'(a . 1)
'(b . 2)
'(c . 3))

(let ((x 1)
(y 2))
(print x y))

(let
((x 1)
(y 2))
(print x y))

(let loop ((x 1)
(y 2))
(print x y))

(let loop
((x 1)
(y 2))
(print x y))

(define-syntax s
(syntax-rules ()
((_ x)
(print x))
((_ x y)
(print x y))))

(define-syntax s
(syntax-rules xxx ()
((_ x)
(print x))
((_ x y)
(print x y))))

